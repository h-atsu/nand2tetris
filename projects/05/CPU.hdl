// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And(a=instruction[3] , b=instruction[15] , out=writeM);
    And(a=instruction[15] , b=instruction[4] , out=loadD);

    Mux16(a=instruction , b=aluout , sel=instruction[15] , out=arin); // A命令かC命令かの判定
    Not(in=instruction[15] , out=isAinst);
    Or(a=isAinst, b=instruction[5], out=lar);
    ARegister(in=arin , load=lar , out=arout , out[0..14]=addressM);
    DRegister(in=aluout , load=loadD , out=drout);
    Mux16(a=arout , b=inM , sel=instruction[12] , out=aorram);
    ALU(x=drout , y=aorram , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=aluout, out=outM , zr=zr , ng=ng);

    // jumpの判定
    Not(in=zr , out=notzr);
    Not(in=ng , out=notng);
    And(a=notng , b=notzr , out=ps);

    And(a=ps , b=instruction[0] , out=w1);
    And(a=ng , b=instruction[2] , out=w2);
    And(a=zr , b=instruction[1] , out=w3);
    Or(a=w1 , b=w2 , out=w4);
    Or(a=w3 , b=w4 , out=w5);
    And(a=instruction[15] , b=w5 , out=loadpc);

    PC(in=arout , load=loadpc , inc=true , reset=reset , out[0..14]=pc);
}